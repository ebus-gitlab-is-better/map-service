// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/accident/v1/accident.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Accident_CreateAccident_FullMethodName = "/api.accident.v1.Accident/CreateAccident"
	Accident_ListAccident_FullMethodName   = "/api.accident.v1.Accident/ListAccident"
)

// AccidentClient is the client API for Accident service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccidentClient interface {
	CreateAccident(ctx context.Context, in *CreateAccidentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAccident(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAccidentReply, error)
}

type accidentClient struct {
	cc grpc.ClientConnInterface
}

func NewAccidentClient(cc grpc.ClientConnInterface) AccidentClient {
	return &accidentClient{cc}
}

func (c *accidentClient) CreateAccident(ctx context.Context, in *CreateAccidentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Accident_CreateAccident_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accidentClient) ListAccident(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListAccidentReply, error) {
	out := new(ListAccidentReply)
	err := c.cc.Invoke(ctx, Accident_ListAccident_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccidentServer is the server API for Accident service.
// All implementations must embed UnimplementedAccidentServer
// for forward compatibility
type AccidentServer interface {
	CreateAccident(context.Context, *CreateAccidentRequest) (*emptypb.Empty, error)
	ListAccident(context.Context, *emptypb.Empty) (*ListAccidentReply, error)
	mustEmbedUnimplementedAccidentServer()
}

// UnimplementedAccidentServer must be embedded to have forward compatible implementations.
type UnimplementedAccidentServer struct {
}

func (UnimplementedAccidentServer) CreateAccident(context.Context, *CreateAccidentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccident not implemented")
}
func (UnimplementedAccidentServer) ListAccident(context.Context, *emptypb.Empty) (*ListAccidentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccident not implemented")
}
func (UnimplementedAccidentServer) mustEmbedUnimplementedAccidentServer() {}

// UnsafeAccidentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccidentServer will
// result in compilation errors.
type UnsafeAccidentServer interface {
	mustEmbedUnimplementedAccidentServer()
}

func RegisterAccidentServer(s grpc.ServiceRegistrar, srv AccidentServer) {
	s.RegisterService(&Accident_ServiceDesc, srv)
}

func _Accident_CreateAccident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentServer).CreateAccident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accident_CreateAccident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentServer).CreateAccident(ctx, req.(*CreateAccidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accident_ListAccident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentServer).ListAccident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Accident_ListAccident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentServer).ListAccident(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Accident_ServiceDesc is the grpc.ServiceDesc for Accident service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accident_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.accident.v1.Accident",
	HandlerType: (*AccidentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccident",
			Handler:    _Accident_CreateAccident_Handler,
		},
		{
			MethodName: "ListAccident",
			Handler:    _Accident_ListAccident_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/accident/v1/accident.proto",
}
